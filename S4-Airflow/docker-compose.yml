services:
  # Nodo Maestro de HDFS
  namenode:
    image: apache/hadoop:3.4.1
    container_name: namenode
    hostname: namenode
    user: root
    environment:
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    volumes:
      - ./hadoop_namenode:/opt/hadoop/data/nameNode
      - ./hadoop_config:/opt/hadoop/etc/hadoop
      - ./scripts/start-hdfs.sh:/start-hdfs.sh
    ports:
      - "9870:9870"
      - "9000:9000"
    command: ["/bin/bash", "/start-hdfs.sh"]
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.2

  # Nodos de almacenamiento de HDFS
  datanode1:
    image: apache/hadoop:3.4.1
    container_name: datanode1
    hostname: datanode1
    user: root
    environment:
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    volumes:
      - ./hadoop_datanode1:/opt/hadoop/data/dataNode
      - ./hadoop_config:/opt/hadoop/etc/hadoop
      - ./scripts/init-datanode.sh:/init-datanode.sh
    depends_on:
      - namenode
    command: ["/bin/bash", "/init-datanode.sh"]
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.3

  datanode2:
    image: apache/hadoop:3.4.1
    container_name: datanode2
    hostname: datanode2
    user: root
    environment:
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    volumes:
      - ./hadoop_datanode2:/opt/hadoop/data/dataNode
      - ./hadoop_config:/opt/hadoop/etc/hadoop
      - ./scripts/init-datanode.sh:/init-datanode.sh
    depends_on:
      - namenode
    command: ["/bin/bash", "/init-datanode.sh"]
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.4

  # YARN Resource Manager
  resourcemanager:
    build:
      context: .
      dockerfile: Dockerfile.nodemanager
    container_name: resourcemanager
    hostname: resourcemanager
    user: root
    environment:
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    volumes:
      - ./hadoop_config:/opt/hadoop/etc/hadoop
      - ./scripts/start-yarn.sh:/start-yarn.sh
    ports:
      - "8088:8088"   # Interfaz web de YARN
      - "8030:8030"   # ComunicaciÃ³n con aplicaciones
      - "8031:8031"
      - "8032:8032"
      - "8033:8033"
    depends_on:
      - namenode
    command: ["/bin/bash", "/start-yarn.sh"]
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.5

  # YARN Node Manager
  nodemanager:
    build:
      context: .
      dockerfile: Dockerfile.nodemanager
    container_name: nodemanager
    hostname: nodemanager
    user: root
    environment:
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
    volumes:
      - ./hadoop_config:/opt/hadoop/etc/hadoop
      - ./scripts/start-nodemanager.sh:/start-nodemanager.sh
    depends_on:
      - resourcemanager
    command: ["/bin/bash", "/start-nodemanager.sh"]
    ports:
      - "8042:8042"   # Interfaz del NodeManager
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.6

  # apache/airflow:2.10.5-python3.9
  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow  # Usaremos un Dockerfile para instalar dependencias
    container_name: airflow
    hostname: airflow
    user: root
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor  # SQLite solo soporta SequentialExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__FERNET_KEY=my_fernet_key
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/airflow.db:/opt/airflow/airflow.db  # Montamos la base de datos SQLite
    entrypoint: >
      /bin/bash -c "
      groupadd --system airflow;
      useradd --system --gid airflow --home-dir /opt/airflow airflow;
      mkdir -p /opt/airflow/dags /opt/airflow/logs /opt/airflow/plugins;
      touch /opt/airflow/airflow.db;
      chown -R airflow:airflow /opt/airflow;
      chmod -R 777 /opt/airflow;
      su - airflow -c 'airflow db migrate';
      su - airflow -c 'airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com';
      su - airflow -c 'airflow connections create --conn_id hdfs_default --conn_type hdfs --host namenode --port 9000 --extra {\"proxy_user\":\"hdfs\"}';
      su - airflow -c 'airflow webserver --port 8080'"
    ports:
      - "8080:8080"  # UI de Airflow
    networks:
      hdfs_network:
        ipv4_address: 172.20.0.7

networks:
  hdfs_network:
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
